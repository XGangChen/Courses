class Net(nn.Module)
optimizer = optim.Adam(model.parameters(), lr=learning_rate)
criterion = nn.CrossEntropyLoss()
for epoch in range(epochs):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = criterion(output, target)
        loss.backward()
        optimizer.step()
    print(f"Epoch {epoch+1}/{epochs} - Loss: {loss.item():.4f}"

torch.save(model.state_dict(), "mnist_cnn.pth")




**********************************************************************



from PIL import Image
import torch
from torchvision import transforms
# Load model
model = Net()
model.load_state_dict(torch.load("mnist_cnn.pth", map_location="cpu"))
model.eval()

img = Image.open("mydigit.png").convert("L")
transform = transforms.Compose([
    transforms.Resize((28, 28)),
    transforms.ToTensor(),
    transforms.Normalize((0.1307,), (0.3081,))])
img_tensor = transform(img).unsqueeze(0)

# Predict
with torch.no_grad():
    output = model(img_tensor)
    pred = output.argmax(dim=1)
    print(f"Prediction: {pred.item()}")
